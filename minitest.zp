(module "minitest"
 (export
  (list :assert-equal assert-equal)
  (list :assert-not-equal assert-not-equal)
  (list :assert-true assert-true)
  (list :assert-false assert-false)
  (list :assert-truthy assert-truthy)
  (list :assert-falsy assert-falsy)
  (list :assert-nil assert-nil)
  (list :assert-not-nil assert-not-nil)
  (list :all-passed all-passed)
  (list :exit-first-fail exit-first-fail)
  (list :colorize colorize)
  (list :verbose verbose)
  (list :results results))

  (loads '())

  (pass-count 0)
  (fail-count 0)

  (_exit #f)
  (_colorize #f)
  (_verbose #f)
  (_c (lambda (x) (if _colorize (color x))))
  (exit-first-fail (lambda (x) (set! _exit x)))
  (colorize (lambda (x) (set! _colorize x)))
  (verbose (lambda (x) (set! _verbose x)))

  (unit-test-handler (lambda (expected actual descr . eq) 
    (let ((test (get-from eq 0 (lambda (x y) (eqv? x y)))))
      (if (not (test expected actual))
        (begin (if _verbose 
               (begin (_c :red) (map display (reverse (list "Test \"" descr "\" failed\n\t"))) (_c :reset)
               (map display (reverse (list "Expected value: \"" expected "\", actual value: \"" actual "\"\n"))))
                (begin (_c :red) (display "F") (_c :reset)))
               (if _exit (begin (_c :red) (write "Exiting on first fail") (_c :reset) (exit 1)))
               (set! fail-count (+ fail-count 1)))
        (begin (if _verbose
                (begin (_c :green) (write (++ "Test \"" descr "\" passed")) (_c :reset))
                (begin (_c :green) (display "P") (_c :reset)))
        (set! pass-count (+ pass-count 1)))))))

  (assert-equal (lambda (x y . descr)
    (let ((descr (get-from descr 0 "assert-equal")))
      (unit-test-handler x y descr))))
  (assert-not-equal (lambda (x y . descr)
    (let ((descr (get-from descr 0 "assert-not-equal")))
      (unit-test-handler x y descr (lambda (x y) (not (eqv? x y)))))))
  (assert-true (lambda (x . descr)
    (let ((descr (get-from descr 0 "assert-true")))
      (assert-equal #t x descr))))
  (assert-false (lambda (x . descr)
    (let ((descr (get-from descr 0 "assert-false")))
      (assert-equal #f x descr))))
  (assert-truthy (lambda (x . descr)
    (let ((descr (get-from descr 0 "assert-truthy")))
      (unit-test-handler x '() descr (lambda (x y) (truthy? x))))))
  (assert-falsy (lambda (x . descr)
    (let ((descr (get-from descr 0 "assert-falsy")))
    (unit-test-handler x '() descr (lambda (x y) (falsy? x))))))
  (assert-nil (lambda (x . descr)
    (let ((descr (get-from descr 0 "assert-nil")))
      (assert-equal (nil) x descr))))
  (assert-not-nil (lambda (x . descr)
    (let ((descr (get-from descr 0 "assert-not-nil")))
      (assert-not-equal (nil) x descr))))

  (results (lambda () 
    (begin
      (write "Results: ")
      (if _verbose (begin
        (_c :green) 
        (if (> pass-count 0) (display (++ "\t|" (replicate pass-count "="))))
        (if (eq? fail-count 0) (write "|"))
        (_c :red)
        (if (eq? pass-count 0) (display "|"))
        (if (> fail-count 0) (write (++ (replicate fail-count "=") "|")))))
      (_c :green) (map display (reverse (list "\tPassed: " pass-count)))
      (_c :red) (map display (reverse (list " Failed: " fail-count "\n"))) (_c :reset)
      fail-count)))
  (all-passed (lambda () (= fail-count 0))))
